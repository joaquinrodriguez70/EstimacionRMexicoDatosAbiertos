# the interval 0 to 1.0
# install.packages("deSolve")
library(deSolve)
# check for convergence
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
#     beta     gamma
#0.6163102 0.3836898
sir_start_date <- "2020-04-1"
# time in days for predictions
t <- 1:as.integer(ymd("2020-05-24") - ymd(sir_start_date))
# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
y = init, times = t,
func = SIR, parms = Opt_par
))
# add a Date column and the observed incidence data
library(dplyr)
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(
Date = ymd(sir_start_date) + days(t - 1),
Country = "Mexico",
cumulative_incident_cases = Infected
)
# plot the data
library(ggplot2)
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
`%>%` <- magrittr::`%>%`
#model suceptible infectious and recovered
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S / N
dI <- beta * I * S / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# extract the cumulative incidence
df <- coronavirus %>%
dplyr::filter(Country.Region == "Mexico") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
# put the daily cumulative incidence numbers for Belgium from
# Feb 4 to March 30 into a vector called Infected
library(lubridate)
Infected <- subset(df, date >= ymd("2020-03-1") & date <= ymd("2020-04-20"))$active_cum
# Create an incrementing Day vector the same length as our
# cases vector
Day <- 1:(length(Infected))
# now specify initial values for N, S, I and R
N <- 1000000
init <- c(
S = N - Infected[1],
I = Infected[1],
R = 0
)
#Then we need to define a function to calculate the RSS, given a set of values for beta and gamma.
# define a function to calculate the residual sum of squares
# (RSS), passing in parameters beta and gamma that are to be
# optimised for the best fit to the incidence data
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[, 3]
sum((Infected - fit)^2)
}
# now find the values of beta and gamma that give the
# smallest RSS, which represents the best fit to the data.
# Start with values of 0.5 for each, and constrain them to
# the interval 0 to 1.0
# install.packages("deSolve")
library(deSolve)
# check for convergence
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
#     beta     gamma
#0.6163102 0.3836898
sir_start_date <- "2020-03-1"
# time in days for predictions
t <- 1:as.integer(ymd("2020-04-21") - ymd(sir_start_date))
# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
y = init, times = t,
func = SIR, parms = Opt_par
))
# add a Date column and the observed incidence data
library(dplyr)
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(
Date = ymd(sir_start_date) + days(t - 1),
Country = "Mexico",
cumulative_incident_cases = Infected
)
# plot the data
library(ggplot2)
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal() +
scale_y_log10(labels = scales::comma)
data(coronavirus)
`%>%` <- magrittr::`%>%`
#model suceptible infectious and recovered
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S / N
dI <- beta * I * S / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# extract the cumulative incidence
df <- coronavirus %>%
dplyr::filter(Country.Region == "Mexico") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
# put the daily cumulative incidence numbers for Belgium from
# Feb 4 to March 30 into a vector called Infected
library(lubridate)
Infected <- subset(df, date >= ymd("2020-03-1") & date <= ymd("2020-04-20"))$active_cum
# Create an incrementing Day vector the same length as our
# cases vector
Day <- 1:(length(Infected))
# now specify initial values for N, S, I and R
N <- 130000000
init <- c(
S = N - Infected[1],
I = Infected[1],
R = 0
)
#Then we need to define a function to calculate the RSS, given a set of values for beta and gamma.
# define a function to calculate the residual sum of squares
# (RSS), passing in parameters beta and gamma that are to be
# optimised for the best fit to the incidence data
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[, 3]
sum((Infected - fit)^2)
}
# now find the values of beta and gamma that give the
# smallest RSS, which represents the best fit to the data.
# Start with values of 0.5 for each, and constrain them to
# the interval 0 to 1.0
# install.packages("deSolve")
library(deSolve)
# check for convergence
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
#     beta     gamma
#0.6163102 0.3836898
sir_start_date <- "2020-03-1"
# time in days for predictions
t <- 1:as.integer(ymd("2020-04-21") - ymd(sir_start_date))
# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
y = init, times = t,
func = SIR, parms = Opt_par
))
# add a Date column and the observed incidence data
library(dplyr)
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(
Date = ymd(sir_start_date) + days(t - 1),
Country = "Mexico",
cumulative_incident_cases = Infected
)
# plot the data
library(ggplot2)
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Mexico",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Mexico",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal() +
scale_y_log10(labels = scales::comma)
Opt_par
R0 <- as.numeric(Opt_par[1] / Opt_par[2])
r0
R0
Infected
#SEIR model
# example from
# https://cran.r-project.org/web/packages/EpiDynamics/EpiDynamics.pdf
install.packages('EpiDynamics')
library(EpiDynamics)
# Initial conditions
initials <- c(S = 0.9, E = .01, I = .001, R = 1 - 0.9 - .01 - .001)
# parameters must be in the following order
# mu = the per capita death rate (and the population level birth rate),
# beta = transmission rate,
# sigma =  the movement form exposed to infectious,
# gamma =  the recovery rate
parameters <- c(mu = 1 / (70 * 365), beta = 500 / 365,
sigma = 1 / 14, gamma = 1 / 7)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
parameters <- c(mu = 1 / (55 * 44), beta =390/44 ,
sigma = 1 / 14, gamma = 1 / 7)
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
seir <- SEIR(pars = parameters, init = initials, time = 0:50)
PlotMods(seir)
print (seir$S)
print (seir$results)
parameters <- c(mu = 1, beta =0.04*20 ,
sigma = 0.24, gamma = 1 / 7)
seir <- SEIR(pars = parameters, init = initials, time = 0:50)
PlotMods(seir)
seir <- SEIR(pars = parameters, init = initials, time = 0:10)
PlotMods(seir)
parameters <- c(mu = 0, beta =0.04*20 ,
sigma = 0.24, gamma = 1 / 7)
PlotMods(seir)
parameters <- c(mu = 0, beta =0.04*20 ,
sigma = 0.025, gamma = 1 / 7)
PlotMods(seir)
install.packages('EpiDynamics')
library(EpiDynamics)
# Initial conditions
initials <- c(S = 0.9, E = .01, I = .001, R = 1 - 0.9 - .01 - .001)
# parameters must be in the following order
# mu = the per capita death rate (and the population level birth rate),
# beta = transmission rate,  (1/beta  is de probability that an suceptibe becomes infected when is contacted by an infected)
# sigma =  the movement form exposed to infectious, or incubation time  (1/14 is fourteen days)
# gamma =  the recovery rate (1/7 is seven days)
#as a note
# R0 = the reproduction rate , beta / gamma
#if R0 = 1.2 , beta is 60/350
#in the example R0 is 9.56
#for covid-19 ,  sigma=1/7 and gamma =1/5 , with an r0 of 1.2,beta=0.24 or  6/25
#parameters <- c(mu = 1 / (70 * 365), beta = 500 / 365,
#                sigma = 1 / 14, gamma = 1 / 7)
parameters <- c(mu = 1 / (70 * 365), beta = 6 / 25,
sigma = 1 / 7, gamma = 1 / 5)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
print(seir$results)
parameters <- c(mu = 1 / (70 * 365), beta = 44 / 100,
sigma = 1 / 7, gamma = 1 / 5)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
print(seir$results)
parameters <- c(mu = 1 / (70 * 365), beta = 1.71/5,
sigma = 1 / 7, gamma = 1 / 5)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
print(seir$results
)
library(devtools)
library(EpiEstim)
setwd('/Users/joaquin/Documents/Mios2020/covid/EpiEstim')
disease_incidence_data <- read.csv("20200503.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
plot(R_estimate)
print(R_estimate$R)
library(devtools)
library(EpiEstim)
setwd('/Users/joaquin/Documents/Mios2020/covid/EpiEstim')
disease_incidence_data <- read.csv("20200503.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
plot(R_estimate)
print(R_estimate$R)
disease_incidence_data <- read.csv("20200503Mich.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
plot(R_estimate)
print(R_estimate$R)
install.packages("devtool")
install.packages("devtools")
#References for code from
#https://rdrr.io/cran/EpiEstim/man/estimate_R.html
#https://github.com/jstockwin/EpiEstimApp/wiki/Example:-EpiEstim-R-package
#The Rt is the main indicator that the number of cases is increasing or otherwise.
#Install requisites if needed
#r = getOption("repos")
#r["CRAN"] = "http://cran.us.r-project.org"
#options(repos = r)
#install.packages("Rcurl")
#install.packages("devtools")
#install.packages("EpiEstim")
library(devtools)
library(EpiEstim)
setwd('/home/joaquin/Documents/Link to misdoc/Mios2020/covid19/EpiEstim')
#datos a partir del 17 de marzo
disease_incidence_data <- read.csv("20200503.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",config = make_config( list(mean_si = 3.9, std_si = 4.5)))
png("MX.png", width = 800, height = 600)
plot(R_estimate)
dev.off()
write.csv(R_estimate$R, "MX.csv")
print(R_estimate$R)
disease_incidence_data <- read.csv("20200503Mich.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",config = make_config(list( mean_si = 3.9, std_si = 4.5)))
png("Mich.png", width = 800, height = 600)
plot(R_estimate)
dev.off()
write.csv(R_estimate$R, "Mich.csv")
print(R_estimate$R)
#References for code from
#https://rdrr.io/cran/EpiEstim/man/estimate_R.html
#https://github.com/jstockwin/EpiEstimApp/wiki/Example:-EpiEstim-R-package
#The Rt is the main indicator that the number of cases is increasing or otherwise.
#Install requisites if needed
#r = getOption("repos")
#r["CRAN"] = "http://cran.us.r-project.org"
#options(repos = r)
#install.packages("Rcurl")
#install.packages("devtools")
#install.packages("EpiEstim")
library(devtools)
library(EpiEstim)
setwd('/home/joaquin/Documents/Link to misdoc/Mios2020/covid19/EpiEstim')
#datos a partir del 17 de marzo
disease_incidence_data <- read.csv("20200503.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",config = make_config( list(mean_si = 3.9, std_si = 4.5)))
png("MX.png", width = 800, height = 600)
plot(R_estimate)
dev.off()
write.csv(R_estimate$R, "MX.csv")
print(R_estimate$R)
disease_incidence_data <- read.csv("20200503Mich.csv", header = FALSE)
R_estimate <- estimate_R(disease_incidence_data,method = "parametric_si",config = make_config(list( mean_si = 3.9, std_si = 4.5)))
png("Mich.png", width = 800, height = 600)
plot(R_estimate)
dev.off()
write.csv(R_estimate$R, "Mich.csv")
print(R_estimate$R)
#http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
#library("RCurl")
library(devtools)
library(EpiEstim)
remove(list = ls())
mydir <-  '/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/estimacionr'
myurl <-  'http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip'
myfile <- 'datos_abiertos_covid19.zip'
resultadoConfirmado  = 1
#calculate the average of last x days for a specific column on a data frame and returs a df
#plot r0 for state
calculaREstado <- function(mxCasesDF , estadoTxt, aretirar,saveToFile,pathToSave){
edoCasesDF <- mxCasesDF[ mxCasesDF$RESULTADO == resultadoConfirmado,c("FECHA_SINTOMAS","RESULTADO")]
casos <- aggregate(formula = RESULTADO ~ FECHA_SINTOMAS,
FUN = sum,
data = edoCasesDF)
if (aretirar > 0 ) {
casos <-head(casos,-aretirar)
}
R_estimate <- estimate_R(casos$RESULTADO ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
#	 plot
if (saveToFile == TRUE) {
#save
# 1. Open jpeg file
setwd(pathToSave)
png(paste(estadoTxt, "Sintomas.png",sep=""), width = 800, height = 600)
# 2. Create the plot
}
plot(R_estimate)
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
write.csv(R_estimate$R, paste(estadoTxt,"Sintomas.csv",sep=""))
}
print(R_estimate$R)
result <-1
return(result)
}
#download and load into dataframe
setwd(mydir)
download.file(myurl, myfile )
unzipfile <- unzip (myfile, list = TRUE)
unzip (myfile, unzipfile$Name)
mxCasesDF <- read.csv ( file=unzipfile$Name)
#fill state names
#run graphs increment vs acumulated
#dataframe with country weide cases, stane number, state name, daysto cut off	, savetoFile, path
calculaREstado (mxCasesDF , "Mexico", 3, TRUE, paste(mydir,"/img",sep=""))
}
tp://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
#library("RCurl")
library(devtools)
library(EpiEstim)
remove(list = ls())
mydir <-  '/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/estimacionr'
myurl <-  'http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip'
myfile <- 'datos_abiertos_covid19.zip'
resultadoConfirmado  = 1
#calculate the average of last x days for a specific column on a data frame and returs a df
#plot r0 for state
calculaREstado <- function(mxCasesDF , estadoTxt, aretirar,saveToFile,pathToSave){
edoCasesDF <- mxCasesDF[ mxCasesDF$RESULTADO == resultadoConfirmado,c("FECHA_SINTOMAS","RESULTADO")]
casos <- aggregate(formula = RESULTADO ~ FECHA_SINTOMAS,
FUN = sum,
data = edoCasesDF)
if (aretirar > 0 ) {
casos <-head(casos,-aretirar)
}
R_estimate <- estimate_R(casos$RESULTADO ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
#	 plot
if (saveToFile == TRUE) {
#save
# 1. Open jpeg file
setwd(pathToSave)
png(paste(estadoTxt, "Sintomas.png",sep=""), width = 800, height = 600)
# 2. Create the plot
}
plot(R_estimate)
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
write.csv(R_estimate$R, paste(estadoTxt,"Sintomas.csv",sep=""))
}
print(R_estimate$R)
result <-1
return(result)
}
#download and load into dataframe
setwd(mydir)
download.file(myurl, myfile )
unzipfile <- unzip (myfile, list = TRUE)
unzip (myfile, unzipfile$Name)
mxCasesDF <- read.csv ( file=unzipfile$Name)
#fill state names
#run graphs increment vs acumulated
#dataframe with country weide cases, stane number, state name, days to cut off	, savetoFile, path
calculaREstado (mxCasesDF , "Mexico", 3, TRUE, paste(mydir,"/img",sep=""))
